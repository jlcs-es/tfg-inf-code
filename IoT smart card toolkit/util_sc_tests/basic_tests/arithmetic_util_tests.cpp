#include <gtest/gtest.h>
#include <p2abc_iot_toolkit_include/smartcard_utils_interface/arithmetic_util.h>


TEST(MultiplicationTest, Test1) {
    WORD length = 10;
    BYTE result[2*length];
    BYTE arr1[] = {0xa7, 0xf1, 0xd9, 0x2a, 0x3f, 0x94, 0x11, 0x47, 0x2b, 0x83};
    BYTE arr2[] = {0x9f, 0x88, 0x67, 0xbd, 0x5c, 0x14, 0x0e, 0x58, 0xdc, 0x2f};
    BYTE expected[] = {0x68, 0xa8, 0xb2, 0x6b, 0x24, 0x44, 0x23, 0x83, 0x90, 0xb5,
                       0xae, 0x72, 0xe3, 0x26, 0x3a, 0x1c, 0x74, 0x7d, 0x91, 0x0d};

    multiplication(result, arr1, arr2, length);

    for(int i=0; i<2*length; i++)
        EXPECT_EQ(expected[i], result[i]);

}

TEST(MultiplicationTest, Test2) {
    WORD length = 10;
    BYTE result[2*length];
    BYTE arr1[] = {0x07, 0xf1, 0xd9, 0x2a, 0x3f, 0x94, 0x11, 0x47, 0x2b, 0x83};
    BYTE arr2[] = {0x01, 0x88, 0x67, 0xbd, 0x5c, 0x14, 0x0e, 0x58, 0xdc, 0x2f};
    BYTE expected[] = {0x00, 0x0c, 0x2d, 0x8c, 0xb7, 0x7a, 0x37, 0xe2, 0x1a, 0x3d,
                       0x74, 0x72, 0xe3, 0x26, 0x3a, 0x1c, 0x74, 0x7d, 0x91, 0x0d};

    multiplication(result, arr1, arr2, length);

    for(int i=0; i<2*length; i++)
        EXPECT_EQ(expected[i], result[i]);

}


TEST(ModularMultiplicationTest, Test1) {
    WORD length = 10;
    BYTE result[length];
    BYTE arr1[] = {0xa7, 0xf1, 0xd9, 0x2a, 0x3f, 0x94, 0x11, 0x47, 0x2b, 0x83};
    BYTE arr2[] = {0x9f, 0x88, 0x67, 0xbd, 0x5c, 0x14, 0x0e, 0x58, 0xdc, 0x2f};
    BYTE modulus[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x67, 0xbd};
    BYTE expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xe7, 0x9e};

    modularMultiplication(result, arr1, arr2, modulus, length);

    for(int i=0; i<length; i++)
        EXPECT_EQ(expected[i], result[i]);

}

TEST(ModularExponentiation, Test1) {
    WORD length = 10, expLength = 5;
    BYTE result[length];
    BYTE base[] = {0xa7, 0xf1, 0xd9, 0x2a, 0x3f, 0x94, 0x11, 0x47, 0x2b, 0x83};
    BYTE modulus[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x67, 0xbd};
    BYTE exp[] = {0x14, 0x0e, 0x58, 0xdc, 0x2f};
    BYTE expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x10, 0x48};

    modularExponentiation(result, base, exp, modulus, length, expLength);

    for(int i=0; i<length; i++)
        EXPECT_EQ(expected[i], result[i]);

}