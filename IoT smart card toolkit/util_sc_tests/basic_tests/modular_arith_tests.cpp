//#include <gtest/gtest.h>
//#include <p2abc_iot_toolkit_include/smartcard_external_utilities/arithmetic_implementation_v1.h>
//#include <iostream>
//
//using namespace std;
//
//void imprimirHexadecimal(BYTE *buffer, int length){
//    for (int i = 0; i < length; i++) {
//        cout << hex << setfill('0') << setw(2) << (unsigned)buffer[i] ;
//    }
//    cout << endl;
//}
//
//
//TEST(BigIntegerArithmeticTest, ShiftRight){
//    BYTE buffer[8] = {0b10000000, 0b11100101, 0b00011000, 0b11111111, 0b00000000, 0b01010101, 0b10101010, 0b00110011};
//    BYTE expBuf[8] = {0b01000000, 0b01110010, 0b10001100, 0b01111111, 0b10000000, 0b00101010, 0b11010101, 0b00011001};
//    shift_right(buffer, 8);
//    for (int i = 0; i < 8; i++)
//        EXPECT_EQ(expBuf[i], buffer[i]);
//}
//
//TEST(BigIntegerArithmeticTest, ShiftLeft10){
//    BYTE buffer[8] = {0b10000000, 0b11100101, 0b00011000, 0b11111111, 0b00000000, 0b01010101, 0b10101010, 0b00110011};
//    BYTE expBuf[8] = {0b10010100, 0b01100011, 0b11111100, 0b00000001, 0b01010110, 0b10101000, 0b11001100, 0b00000000};
//    shiftLeftbyN(buffer, 8, 10);
//    for (int i = 0; i < 8; i++)
//        EXPECT_EQ(expBuf[i], buffer[i]);
//}
//
//
//TEST(ModularAdditionTest, Test1) {
//    //TODO: en java usar big integer para sacar la soluciÃ³n
//    WORD length = 128;
//    BYTE result[length]; fillZeros(result, length);
//    BYTE arr1[] = {0xa7, 0xf1, 0xd9, 0x2a, 0x82, 0xc8, 0xd8, 0xfe, 0x43, 0x4d, 0x98, 0x55, 0x8c, 0xe2, 0xb3, 0x47, 0x17, 0x11, 0x98, 0x54, 0x2f, 0x11, 0x2d, 0x05, 0x58, 0xf5, 0x6b, 0xd6, 0x88, 0x07, 0x99, 0x92, 0x48, 0x33, 0x62, 0x41, 0xf3, 0x0d, 0x23, 0xe5, 0x5f, 0x30, 0xd1, 0xc8, 0xed, 0x61, 0x0c, 0x4b, 0x02, 0x35, 0x39, 0x81, 0x84, 0xb8, 0x14, 0xa2, 0x9c, 0xb4, 0x5a, 0x67, 0x2a, 0xca, 0xe5, 0x48, 0xe9, 0xc5, 0xf1, 0xb0, 0xc4, 0x15, 0x8a, 0xe5, 0x9b, 0x4d, 0x39, 0xf6, 0xf7, 0xe8, 0xa1, 0x05, 0xd3, 0xfe, 0xed, 0xa5, 0xd5, 0xf3, 0xd9, 0xe4, 0x5b, 0xfa, 0x6c, 0xc3, 0x51, 0xe2, 0x20, 0xae, 0x0c, 0xe1, 0x06, 0x98, 0x6d, 0x61, 0xff, 0x34, 0xa1, 0x1e, 0x19, 0xfd, 0x36, 0x50, 0xe9, 0xb7, 0x81, 0x8f, 0xc3, 0x3a, 0x1e, 0x0f, 0xc0, 0x2c, 0x44, 0x55, 0x7a, 0xc8, 0xab, 0x50, 0xc9, 0xb2};
//    BYTE arr2[] = {0x9f, 0x88, 0x67, 0xbd, 0xce, 0x1f, 0xf2, 0x61, 0x00, 0x8e, 0x78, 0x97, 0x97, 0x0e, 0x34, 0x62, 0x07, 0xd7, 0x5e, 0x47, 0xa1, 0x58, 0x29, 0x8e, 0x5b, 0xa2, 0xf5, 0x62, 0x46, 0x86, 0x9c, 0xc4, 0x2e, 0x36, 0x2a, 0x02, 0x73, 0x12, 0x64, 0xe6, 0x06, 0x87, 0xef, 0x53, 0x09, 0xd1, 0x08, 0x53, 0x4f, 0x51, 0xf8, 0x65, 0x8f, 0xb4, 0xf0, 0x80, 0xb7, 0xcb, 0x19, 0xee, 0x9a, 0xeb, 0xd7, 0x18, 0xcc, 0x4f, 0xa2, 0x7c, 0x8c, 0x37, 0xdf, 0xc1, 0xad, 0xa5, 0xd1, 0x33, 0xd1, 0x3a, 0xbe, 0x03, 0xf0, 0x21, 0xe9, 0xb1, 0xb7, 0x8c, 0xcb, 0xd8, 0x2f, 0x7f, 0xf2, 0xb3, 0x8c, 0x6d, 0x48, 0xd0, 0x1e, 0x48, 0x1b, 0x2d, 0x4f, 0xaf, 0x71, 0x71, 0x80, 0x5f, 0xd7, 0xf2, 0xd3, 0x9e, 0xf4, 0xc4, 0xf1, 0x9b, 0x94, 0x96, 0xe8, 0x1d, 0xab, 0x81, 0x93, 0xb3, 0x73, 0x7e, 0x1b, 0x27, 0xd9, 0xc4};
//    BYTE modulus[] = {0xe8, 0xf0, 0x3c, 0x95, 0xd8, 0xe8, 0xce, 0x1e, 0x18, 0x64, 0xfa, 0xad, 0x68, 0xdd, 0xfc, 0x59, 0x32, 0x13, 0x01, 0x09, 0x39, 0x0b, 0x0f, 0x1f, 0xe5, 0xca, 0x71, 0x68, 0x05, 0xf8, 0x36, 0x2e, 0x98, 0xdc, 0xca, 0xad, 0xc8, 0x6a, 0xdb, 0xed, 0x25, 0x80, 0x1a, 0x9a, 0x9d, 0xcf, 0xa6, 0x26, 0x43, 0x19, 0xdd, 0xaf, 0xe8, 0x3a, 0x89, 0xc5, 0x1f, 0x3c, 0x6d, 0x19, 0x9d, 0x38, 0xde, 0x10, 0xe6, 0x60, 0xc3, 0x7b, 0xe8, 0x72, 0xc3, 0xf2, 0xb3, 0x16, 0x60, 0xde, 0x8b, 0xc9, 0x59, 0x02, 0xb9, 0x10, 0x32, 0x62, 0xcd, 0xb9, 0x41, 0xf7, 0x73, 0x76, 0xf5, 0xd3, 0xdb, 0xb7, 0xa3, 0xd5, 0xa3, 0x87, 0x79, 0x7f, 0xc4, 0x81, 0x9a, 0x03, 0x5e, 0xca, 0x70, 0x4c, 0xed, 0xb3, 0x71, 0x10, 0xee, 0x7f, 0x20, 0x6b, 0x0c, 0x88, 0x05, 0xaa, 0xeb, 0xf4, 0x96, 0x3e, 0x7c, 0x47, 0x08, 0xce};
//
//
//    cout << endl;
//    imprimirHexadecimal(result, length);
//
//
//    modular_add(result, arr1, arr2, modulus, length);
//
//    imprimirHexadecimal(arr1, length);
//    imprimirHexadecimal(arr2, length);
//    imprimirHexadecimal(result, length);
//
//}
//
//TEST(ModularAdditionTest, Test2) {
//    WORD length = 4;
//    BYTE result[length]; fillZeros(result, length);
//    BYTE arr1[] = {0xa7, 0xf1, 0xd9, 0x2a};
//    BYTE arr2[] = {0x9f, 0x88, 0x67, 0xbd};
//    BYTE modulus[] = {0xe8, 0xf0, 0x3c, 0x95};
//    BYTE expected[] = {0x5E, 0x8A, 0x04, 0x52};
//
//    modular_add(result, arr1, arr2, modulus, length);
//
//    for(int i=0; i<length; i++)
//        EXPECT_EQ(expected[i], result[i]);
//
//}
//
//TEST(SubtractionTest, Test1) {
//    WORD length = 4;
//    BYTE result[length]; fillZeros(result, length);
//    BYTE arr1[] = {0xa7, 0xf1, 0xd9, 0x2a};
//    BYTE arr2[] = {0x9f, 0x88, 0x67, 0xbd};
//    BYTE expected[] = {0x08, 0x69, 0x71, 0x6d};
//
//    subtract(result, arr1, arr2, length);
//    for(int i=0; i<length; i++)
//        EXPECT_EQ(expected[i], result[i]);
//}
//
//
//TEST(ModuleTest, Test1) {
//    WORD length = 4;
//    BYTE base[] = {0xa7, 0xf1, 0xd9, 0x2a};
//    BYTE modulus[] = {0x00, 0x88, 0x67, 0xbd};
//    BYTE expected[] = {0x00, 0x1a, 0x33, 0x9b};
//
//    module(base, base, modulus, length);
//    for(int i=0; i<length; i++)
//        EXPECT_EQ(expected[i], base[i]);
//}
//
//
//
//TEST(ProductTest, Length2) {
//    WORD length = 2;
//    BYTE result[2*length]; fillZeros(result, 2*length);
//    BYTE arr1[] = {0xa7, 0xf1};
//    BYTE arr2[] = {0x9f, 0x88};
//    BYTE expected[] = {0x68, 0xa7, 0xe7, 0x08};
//
//    product(result, arr1, arr2, length);
//
//    for(int i=0; i<2*length; i++)
//        EXPECT_EQ(expected[i], result[i]);
//
//}
//
//
//TEST(ProductTest, Length3) {
//    WORD length = 3;
//    BYTE result[2*length]; fillZeros(result, 2*length);
//    BYTE arr1[] = {0xa7, 0xf1, 0xd9};
//    BYTE arr2[] = {0x9f, 0x88, 0x67};
//    BYTE expected[] = {0x68, 0xa8, 0xb1, 0xd4, 0x96, 0x4f};
//
//    product(result, arr1, arr2, length);
//
//    for(int i=0; i<2*length; i++)
//        EXPECT_EQ(expected[i], result[i]);
//
//}
//
//
//TEST(ProductTest, Length4) {
//    WORD length = 4;
//    BYTE result[2*length]; fillZeros(result, 2*length);
//    BYTE arr1[] = {0xa7, 0xf1, 0xd9, 0x2a};
//    BYTE arr2[] = {0x9f, 0x88, 0x67, 0xbd};
//    BYTE expected[] = {0x68, 0xa8, 0xb2, 0x6a, 0xc0, 0x3d, 0x3a, 0x02};
//
//    product(result, arr1, arr2, length);
//
//    for(int i=0; i<2*length; i++)
//        EXPECT_EQ(expected[i], result[i]);
//
//}
//
//
//TEST(ProductTest, Length10) {
//    WORD length = 10;
//    BYTE result[2*length]; fillZeros(result, 2*length);
//    BYTE arr1[] = {0xa7, 0xf1, 0xd9, 0x2a, 0x3f, 0x94, 0x11, 0x47, 0x2b, 0x83};
//    BYTE arr2[] = {0x9f, 0x88, 0x67, 0xbd, 0x5c, 0x14, 0x0e, 0x58, 0xdc, 0x2f};
//    BYTE expected[] = {0x68, 0xa8, 0xb2, 0x6b, 0x24, 0x44, 0x23, 0x83, 0x90, 0xb5, 0xae, 0x72, 0xe3, 0x26, 0x3a, 0x1c, 0x74, 0x7d, 0x91, 0x0d};
//
//    // cout << endl;
//    // imprimirHexadecimal(arr1, length);
//    // imprimirHexadecimal(arr2, length);
//    product(result, arr1, arr2, length);
//    // imprimirHexadecimal(result, 2*length);
//    // cout << endl;
//
//    for(int i=0; i<2*length; i++)
//        EXPECT_EQ(expected[i], result[i]);
//
//}
//
//
//
//
//TEST(ModularProductTest, Length3) {
//    WORD length = 3;
//    BYTE result[length]; fillZeros(result, length);
//    BYTE arr1[] = {0xa7, 0xf1, 0xd9};
//    BYTE arr2[] = {0x9f, 0x88, 0x67};
//    BYTE modulus[] = {0x88, 0x67, 0xbd};
//    BYTE expected[] = {0x3A, 0xBF, 0x80};
//
//    cout << endl;
//    imprimirHexadecimal(arr1, length);
//    imprimirHexadecimal(arr2, length);
//
//    modular_product(result, arr1, arr2, modulus, length);
//
//    imprimirHexadecimal(result, length);
//    cout << endl;
//
//    for(int i=0; i<length; i++)
//        EXPECT_EQ(expected[i], result[i]);
//
//}
//
//
//
//
//TEST(ModularProductTest, Length10) {
//    WORD length = 10;
//    BYTE result[length]; fillZeros(result, length);
//    BYTE arr1[] = {0xa7, 0xf1, 0xd9, 0x2a, 0x3f, 0x94, 0x11, 0x47, 0x2b, 0x83};
//    BYTE arr2[] = {0x9f, 0x88, 0x67, 0xbd, 0x5c, 0x14, 0x0e, 0x58, 0xdc, 0x2f};
//    BYTE modulus[] = {0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x88, 0x67, 0xbd, 0x1a};
//    BYTE expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xb9, 0x04, 0x8f};
//
//    cout << endl;
//    imprimirHexadecimal(arr1, length);
//    imprimirHexadecimal(arr2, length);
//    modular_product(result, arr1, arr2, modulus, length);
//    imprimirHexadecimal(result, length);
//    cout << endl;
//
//    for(int i=0; i<length; i++)
//        EXPECT_EQ(expected[i], result[i]);
//
//}
//
//
//TEST(DivisionTest, Test1) {
//    WORD length = 8;
//    BYTE result[length]; fillZeros(result, length);
//    BYTE arr1[] = {0x68, 0xa8, 0xb2, 0x6a, 0xc0, 0x3d, 0x3a, 0x02};
//    BYTE arr2[] = {0x00, 0x00, 0xab, 0x00, 0x9f, 0x88, 0x67, 0xbd};
//    BYTE expected[] = {0x00, 0x00, 0x00, 0x00, 0xa7, 0xf1, 0xd9, 0x2a};
//
//    cout << endl;
//    imprimirHexadecimal(arr1, length);
//    imprimirHexadecimal(arr2, length);
//    imprimirHexadecimal(expected, length);
//    division(result, arr1, arr2, length);
//    imprimirHexadecimal(result, length);
//    cout << endl;
//
//    for(int i=0; i<length; i++)
//        EXPECT_EQ(expected[i], result[i]);
//}