<Type Name="SCardMonitor" FullName="PCSC.SCardMonitor">
  <TypeSignature Language="C#" Value="public class SCardMonitor : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>pcsc-sharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Monitors a Smart Card reader and triggers events on status changes.</summary>
    <remarks>Creates a new thread and calls the <see cref="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])" /> of the given <see cref="T:PCSC.SCardContext" /> object.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCardMonitor (PCSC.SCardContext hContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hContext" Type="PCSC.SCardContext" />
      </Parameters>
      <Docs>
        <param name="hContext">A new Application Context to the PC/SC Resource Manager.</param>
        <summary>Creates a new SCardMonitor object that is able to listen for certain Smart Card / reader changes.</summary>
        <remarks>The monitor object should use its own Application Context to the PC/SC Resource Manager. It will create a (new) backgroud thread that will listen for status changes.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCardMonitor (PCSC.SCardContext hContext, PCSC.SCardScope scope);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hContext" Type="PCSC.SCardContext" />
        <Parameter Name="scope" Type="PCSC.SCardScope" />
      </Parameters>
      <Docs>
        <param name="hContext">A new Application Context to the PC/SC Resource Manager.</param>
        <param name="scope">Scope of the establishment. This can either be a local or remote connection.</param>
        <summary>Creates a new SCardMonitor object that is able to listen for certain Smart Card / reader changes.</summary>
        <remarks>The monitor object should use its own Application Context to the PC/SC Resource Manager. It will create a (new) backgroud thread that will listen for status changes.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the monitoring of all readers that are currently being monitored.</summary>
        <remarks>This will end the monitoring. The method calls the <see cref="M:PCSC.SCardContext.Cancel()" /> method of its Application Context to the PC/SC Resource Manager.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CardInserted">
      <MemberSignature Language="C#" Value="public event PCSC.CardInsertedEvent CardInserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.CardInsertedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A new card has been inserted.</summary>
        <remarks>
          <example>
            <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyCardInsertedMethod.
monitor.CardInserted += new CardInsertedEvent(MyCardInsertedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CardRemoved">
      <MemberSignature Language="C#" Value="public event PCSC.CardRemovedEvent CardRemoved;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.CardRemovedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A card has been removed.</summary>
        <remarks>
          <example>
            <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyCardRemovedMethod.
monitor.CardRemoved += new CardRemovedEvent(MyCardRemovedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the object.</summary>
        <remarks>Dispose will call <see cref="M:PCSC.SCardMonitor.Cancel()" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SCardMonitor ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public PCSC.SCRState GetCurrentState (int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.SCRState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The number of the desired reader. The index must be between 0 and (<see cref="P:PCSC.SCardMonitor.ReaderCount" /> - 1).</param>
        <summary>Returns the current state of a reader that is currently being monitored.</summary>
        <returns>The current state of reader with index number <paramref name="index" />.</returns>
        <remarks>This method will throw an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="index" /> is invalid. You can enumerate all readers currently monitored with the <see cref="P:PCSC.SCardMonitor.ReaderNames" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentStateValue">
      <MemberSignature Language="C#" Value="public IntPtr GetCurrentStateValue (int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The number of the desired reader. The index must be between 0 and (<see cref="P:PCSC.SCardMonitor.ReaderCount" /> - 1).</param>
        <summary>Returns the current state of a reader that is currently being monitored.</summary>
        <returns>The current state of reader with index number <paramref name="index" />.</returns>
        <remarks>This method will throw an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="index" /> is invalid. You can enumerate all readers currently monitored with the <see cref="P:PCSC.SCardMonitor.ReaderNames" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReaderName">
      <MemberSignature Language="C#" Value="public string GetReaderName (int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The number of the desired reader. The index must be between 0 and (<see cref="P:PCSC.SCardMonitor.ReaderCount" /> - 1).</param>
        <summary>Returns the reader name of a given <paramref name="index" />.</summary>
        <returns>A reader name.</returns>
        <remarks>This method will throw an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="index" /> is invalid. You can enumerate all readers currently monitored with the <see cref="P:PCSC.SCardMonitor.ReaderNames" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event PCSC.CardInitializedEvent Initialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.CardInitializedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The monitor object has been initialized.</summary>
        <remarks>
          <para>
This event appears only once for each reader after calling <see cref="M:PCSC.SCardMonitor.Start(string)" /> or <see cref="M:PCSC.SCardMonitor.Start(string[])" />.
</para>
          <example>
            <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyCardInitializedMethod.
monitor.Initialized += new CardInitializedEvent(MyCardInitializedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MonitorException">
      <MemberSignature Language="C#" Value="public event PCSC.MonitorExceptionEvent MonitorException;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.MonitorExceptionEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An PC/SC error occurred during monitoring.</summary>
        <remarks>
          <example>
            <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyMonitorExceptionMethod.
monitor.MonitorException += new MonitorExceptionEvent(MyMonitorExceptionMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Monitoring">
      <MemberSignature Language="C#" Value="public bool Monitoring { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates if there are readers currently monitored.</summary>
        <value>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see langword="true" />
              </term>
              <description>Monitoring process ongoing.</description>
            </item>
            <item>
              <term>
                <see langword="false" />
              </term>
              <description>No monitoring.</description>
            </item>
          </list>
        </value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReaderCount">
      <MemberSignature Language="C#" Value="public int ReaderCount { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of readers that currently being monitored.</summary>
        <value>Return 0 if no reader is being monitored.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReaderNames">
      <MemberSignature Language="C#" Value="public string[] ReaderNames { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>All readers that are currently being monitored.</summary>
        <value>A <see cref="T:System.String" /> array of reader names. <see langword="null" /> if no readers is being monitored.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (string readername);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readername" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="readername">The Smart Card reader that shall be monitored.</param>
        <summary>Starts to monitor a single Smart Card reader for status changes.</summary>
        <remarks>
          <example>
            <code lang="C#">
// Create a new monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Start to monitor a single reader.
monitor.Start("OMNIKEY CardMan 5x21 00 00");

  </code>
          </example>
          <para>
Do not forget to register for at least one event:

<list type="table"><listheader><term>Event</term><description>Description</description></listheader><item><term><see cref="E:PCSC.SCardMonitor.CardInserted" /></term><description>A new card has been inserted.</description></item><item><term><see cref="E:PCSC.SCardMonitor.CardRemoved" /></term><description>A card has been removed.</description></item><item><term><see cref="E:PCSC.SCardMonitor.Initialized" /></term><description>Initial status.</description></item><item><term><see cref="E:PCSC.SCardMonitor.StatusChanged" /></term><description>A general status change.</description></item><item><term><see cref="E:PCSC.SCardMonitor.MonitorException" /></term><description>An error occurred.</description></item></list></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (string[] readernames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readernames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="readernames">A <see cref="T:System.String" /> array of reader names that shall be monitored.</param>
        <summary>Starts to monitor a range Smart Card readers for status changes.</summary>
        <remarks>
          <example>
            <code lang="C#">
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// Retrieve the names of all installed readers.
string[] readernames = ctx.GetReaders();

ctx.Release();

// Create a new monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

foreach (string reader in readernames)
	Console.WriteLine("Start monitoring for reader " + reader + ".");
        
// Start monitoring multiple readers.
monitor.Start(readernames);
</code>
          </example>
          <para>
Do not forget to register for at least one event:

<list type="table"><listheader><term>Event</term><description>Description</description></listheader><item><term><see cref="E:PCSC.SCardMonitor.CardInserted" /></term><description>A new card has been inserted.</description></item><item><term><see cref="E:PCSC.SCardMonitor.CardRemoved" /></term><description>A card has been removed.</description></item><item><term><see cref="E:PCSC.SCardMonitor.Initialized" /></term><description>Initial status.</description></item><item><term><see cref="E:PCSC.SCardMonitor.StatusChanged" /></term><description>A general status change.</description></item><item><term><see cref="E:PCSC.SCardMonitor.MonitorException" /></term><description>An error occurred.</description></item></list></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusChanged">
      <MemberSignature Language="C#" Value="public event PCSC.StatusChangeEvent StatusChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PCSC.StatusChangeEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A general reader status change.</summary>
        <remarks>
          <example>
            <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyStatusChangedMethod.
monitor.StatusChanged += new StatusChangeEvent(MyStatusChangedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
