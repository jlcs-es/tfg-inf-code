<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UProveCrypto</name>
    </assembly>
    <members>
        <member name="T:UProveCrypto.FieldZq">
            <summary>
            Represents the field Zq.
            </summary>
        </member>
        <member name="M:UProveCrypto.FieldZq.#ctor(UProveCrypto.BigInteger)">
            <summary>
            Constructs a FieldZq.
            </summary>
            <param name="q">The value q.</param>
        </member>
        <member name="M:UProveCrypto.FieldZq.GetRandomElement(System.Boolean)">
            <summary>
            Generates a random Zq element.
            </summary>
            <param name="nonZero">True to return a non-zero element.</param>
            <returns>A random Zq element.</returns>
        </member>
        <member name="M:UProveCrypto.FieldZq.GetRandomElements(System.Int32,System.Boolean)">
            <summary>
            Generates an array of random Zq element.
            </summary>
            <param name="n">The number of elements to return.</param>
            <param name="nonZero">True to return non-zero elements.</param>
            <returns>Random Zq elements.</returns>
        </member>
        <member name="M:UProveCrypto.FieldZq.Negate(UProveCrypto.BigInteger)">
            <summary>
            Returns the negation of a Zq element, i.e., the additive inverse mod q.
            </summary>
            <param name="i">An element of Zq.</param>
            <returns>-i mod q</returns>
        </member>
        <member name="M:UProveCrypto.FieldZq.Inverse(UProveCrypto.BigInteger)">
            <summary>
            Returns the multiplicative inverse of i.
            </summary>
            <param name="i">An element of Zq.</param>
            <returns>i^-1 mod q</returns>
        </member>
        <member name="M:UProveCrypto.FieldZq.GetElementFromDigest(System.Byte[])">
            <summary>
            Transforms a hash digest into a Zq element. The digest is interpreted as an unsigned
            integer in big-endian byte order modulo q.
            </summary>
            <param name="digest">A digest value.</param>.
            <returns>A Zq element.</returns>
        </member>
        <member name="M:UProveCrypto.FieldZq.CheckRange(UProveCrypto.BigInteger)">
            <summary>
            Checks that 0 &lt;= <code>i</code> &lt; q.
            </summary>
            <param name="i">The value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <code>i</code> is not in range.</exception>
        </member>
        <member name="T:UProveCrypto.VirtualDevice">
            <summary>
            Implements a simple <code>Device</code> for the U-Prove protocol. This implementation can only 
            have one active session (context).
            </summary>
        </member>
        <member name="T:UProveCrypto.IDevice">
            <summary>
            Simple Device Interface
            </summary>
        </member>
        <member name="M:UProveCrypto.IDevice.GetDevicePublicKey">
            <summary>
            Returns the Device public key <code>h_d</code>.
            </summary>
            <returns><code>h_d</code>.</returns>
        </member>
        <member name="M:UProveCrypto.IDevice.GetPresentationContext">
            <summary>
            Gets the presentation context.
            </summary>
            <returns>A presentation context.</returns>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.#ctor(UProveCrypto.IssuerParameters)">
            <summary>
            Constructs a new VirtualDevice instance.
            </summary>
            <param name="ip">The Issuer parameters.</param>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.#ctor(UProveCrypto.IssuerParameters,UProveCrypto.BigInteger)">
            <summary>
            Constructs a new VirtualDevice instance.
            </summary>
            <param name="ip">The Issuer parameters.</param>
            <param name="xd">The device private key.</param>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.#ctor(UProveCrypto.IssuerParameters,UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Constructs a new VirtualDevice instance.
            </summary>
            <param name="ip">The Issuer parameters.</param>
            <param name="xd">The device private key.</param>
            <param name="preGenWdPrime">The pregenerated w_d prime value (for one presentation)</param>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.#ctor(UProveCrypto.ParameterSet)">
            <summary>
            Constructs a new VirtualDevice instance.
            </summary>
            <param name="parameterSet">The parameter set.</param>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.#ctor(UProveCrypto.ParameterSet,UProveCrypto.BigInteger)">
            <summary>
            Constructs a new VirtualDevice instance.
            </summary>
            <param name="parameterSet">The parameter set.</param>
            <param name="xd">The device private key.</param>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.#ctor(UProveCrypto.ParameterSet,UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Constructs a new VirtualDevice instance.
            </summary>
            <param name="parameterSet">The parameter set.</param>
            <param name="xd">The device private key.</param>
            <param name="preGenWdPrime">The pregenerated w_d prime value (for one presentation)</param>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.#ctor(UProveCrypto.GroupDescription,UProveCrypto.GroupElement,UProveCrypto.FieldZq,UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Private constructor - takes and sets all fields.
            </summary>
            <param name="gq">The gq.</param>
            <param name="gd">The gd.</param>
            <param name="zq">The zq.</param>
            <param name="xd">The xd.</param>
            <param name="preGenWdPrime">The pre gen wd prime.</param>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.UProveCrypto#IDevice#GetDevicePublicKey">
            <summary>
            Returns the Device public key <code>h_d</code>.
            </summary>
            <returns>
              <code>h_d</code>.
            </returns>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.UProveCrypto#IDevice#GetPresentationContext">
            <summary>
            Gets the presentation context.
            </summary>
            <returns>
            A presentation context.
            </returns>
        </member>
        <member name="T:UProveCrypto.VirtualDevice.DevicePresentationContext">
            <summary>
            A device presentation context
            </summary>
        </member>
        <member name="T:UProveCrypto.IDevicePresentationContext">
            <summary>
            Interface for a device presentation context
            </summary>
        </member>
        <member name="M:UProveCrypto.IDevicePresentationContext.GetInitialWitness">
            <summary>
            Returns the Device initial witness for a U-Prove token presentation.
            </summary>
            <returns><code>a</code>.</returns>
        </member>
        <member name="M:UProveCrypto.IDevicePresentationContext.GetInitialWitnessesAndPseudonym(System.Byte[],UProveCrypto.GroupElement@,UProveCrypto.GroupElement@)">
            <summary>
            Returns the Device initial witness for a U-Prove token presentation.
            </summary>
            <param name="pseudonymScope">The pseudonym scope.</param>
            <param name="apPrime">The <code>ap'</code> value.</param>
            <param name="Ps">The <code>Ps</code> value.</param>
            <returns><code>a</code>.</returns>
        </member>
        <member name="M:UProveCrypto.IDevicePresentationContext.GetDeviceResponse(System.Byte[],System.Byte[],System.String)">
            <summary>
             Returns the Device response for a U-Prove token presentation.
            </summary>
            <param name="messageForDevice">The message for the Device.</param>
            <param name="partialChallengeDigest">The partial challenge digest.</param>
            <param name="hashOID">The hash algorithm OID for the challenge generation.</param>
            <returns><code>r_d</code>.</returns>
        </member>
        <member name="F:UProveCrypto.VirtualDevice.DevicePresentationContext.device">
            <summary>
            The device
            </summary>
        </member>
        <member name="M:UProveCrypto.VirtualDevice.DevicePresentationContext.#ctor(UProveCrypto.VirtualDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:UProveCrypto.VirtualDevice.DevicePresentationContext"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:UProveCrypto.Serializer">
            <summary>
            
            </summary>
        </member>
        <member name="T:UProveCrypto.IssuerParameters">
            <summary>
            Represents the Issuer Parameters, including the Device parameters if issuance of Device-protected
            tokens is supported.
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerParameters.#ctor">
            <summary>
            Constructs an Issuer parameters instance.
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerParameters.#ctor(System.String)">
            <summary>
            Constructs an Issuer parameters instance from a serialized string
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerParameters.#ctor(System.Byte[],UProveCrypto.GroupDescription,System.String,UProveCrypto.GroupElement[],UProveCrypto.GroupElement,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Constructs an Issuer parameters instance.
            </summary>
            <param name="uidp">The Issuer parameters UID.</param>
            <param name="group">The group description.</param>
            <param name="uidh">The hash algorithm identifier.</param>
            <param name="g">The generator values.</param>
            <param name="gd">The Device generator, or null.</param>
            <param name="e">The encoding bytes.</param>
            <param name="s">The specification bytes.</param>
            <param name="usesRecommendedParameters">Indicates if the group and g array uses the recommended parameters.</param>
        </member>
        <member name="M:UProveCrypto.IssuerParameters.Verify">
            <summary>
            Verifies the Issuer parameters.
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerParameters.Digest(System.Boolean)">
            <summary>
            Gets the Issuer parameter digest.
            <param name="deviceProtected">True if the digest is for a device-protected token, false otherwise.</param>
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerParameters.Serialize``1(``0)">
            <summary>
            Serialize a UProveCrypto type to a JSON string
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerParameters.Serialize">
            <summary>
            Serialize this IssuerParameters to a JSON string
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerParameters.Deserialize``1(System.String)">
            <summary>
            Deserialize a JSON string into a UProveCrypto object
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.UidP">
            <summary>
            Gets or sets the Issuer parameters UID.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.Gq">
            <summary>
            Gets or sets the group description.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.UidH">
            <summary>
            Gets or sets the hash algorithm identifier.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.G">
            <summary>
            Gets or sets the generator values.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.Gd">
            <summary>
            Gets or sets the Device generator value.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.E">
            <summary>
            Gets or sets the encoding bytes.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.S">
            <summary>
            Gets or sets the specification bytes.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.UsesRecommendedParameters">
            <summary>
            Gets or sets the indicator for usage of the recommended parameters.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.IsDeviceSupported">
            <summary>
            Returns true if Device-protection is supported.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.HashFunction">
            <summary>
            Gets a newly instanciated hash function with the algorithm specified in Uidh.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerParameters.HashFunctionOID">
            <summary>
            Gets the algorithm OID for the active hash function. OIDs are taken from http://msdn.microsoft.com/en-us/library/aa381133(VS.85).aspx.
            </summary>
        </member>
        <member name="T:UProveCrypto.ExtensionMethods">
            <summary>
            Serialization Extension methods to simplify the Base64 encoding that we do all over the place
            </summary>
        </member>
        <member name="T:UProveCrypto.ecc.ECGroupRepresentation">
            <summary>
            Serializable representation of a EC group description.
            </summary>
        </member>
        <member name="T:UProveCrypto.GroupDescription">
            <summary>
            Describes a group Gq.
            </summary>
        </member>
        <member name="M:UProveCrypto.GroupDescription.#ctor(UProveCrypto.GroupConstruction)">
            <summary>
            Constructs a GroupDescription.
            </summary>
        </member>
        <member name="M:UProveCrypto.GroupDescription.#ctor(UProveCrypto.GroupConstruction,UProveCrypto.BigInteger,UProveCrypto.GroupElement,System.String)">
            <summary>
            Constructs a GroupDescription.
            <param name="construction">The group construction.</param>
            <param name="q">The value q.</param>
            <param name="g">The value g.</param>
            <param name="groupName">The group name.</param>
            </summary>
        </member>
        <member name="M:UProveCrypto.GroupDescription.IsGroupElement(UProveCrypto.GroupElement)">
            <summary>
            Verifies if e is a group element.
            </summary>
            <param name="e">The element to test.</param>
            <exception cref="T:UProveCrypto.InvalidUProveArtifactException">Thrown if i is not in the group.</exception>
        </member>
        <member name="M:UProveCrypto.GroupDescription.CreateGroupElement(System.Byte[])">
            <summary>
            Returns the group element encoded in byte array.
            </summary>
            <param name="value">A byte array encoding a group element.</param>
            <returns>A group element.</returns>
        </member>
        <member name="M:UProveCrypto.GroupDescription.UpdateHash(UProveCrypto.HashFunction)">
            <summary>
            Updates the specified hash function with the group description elements.
            </summary>
            <param name="h">An instanciated hash function.</param>
        </member>
        <member name="M:UProveCrypto.GroupDescription.Verify">
            <summary>
            Verifies that the group is correctly constructed.
            </summary>
            <exception cref="T:UProveCrypto.InvalidUProveArtifactException">Thrown if i is not in the group.</exception>
        </member>
        <member name="M:UProveCrypto.GroupDescription.DeriveElement(System.Byte[],System.Byte,System.Int32@)">
            <summary>
            Derives an unpredictable element of the group, using the input. Each construction defines its
            own derivation mechanism, but each takes an optional context string and an index, and returns
            a counter. Calling this method with the same parameter values returns the same element and counter,
            calling it with a different context or index value must return a different element.
            </summary>
            <param name="context">An optional context used by the derivation mechanism, can be null.</param>
            <param name="index">An 8-bit integer index value.</param>
            <param name="counter">A counter value indicating the state at which the derivation mechanism stopped.</param>
            <returns></returns>
        </member>
        <member name="P:UProveCrypto.GroupDescription.Construction">
            <summary>
            Gets the group construction.
            </summary>
        </member>
        <member name="P:UProveCrypto.GroupDescription.Q">
            <summary>
            Gets or sets the value q.
            </summary>
        </member>
        <member name="P:UProveCrypto.GroupDescription.G">
            <summary>
            Gets or sets the value G.
            </summary>
        </member>
        <member name="P:UProveCrypto.GroupDescription.GroupName">
            <summary>
            Gets the known group name (if generated from recommended parameters), or null.
            </summary>
        </member>
        <member name="P:UProveCrypto.GroupDescription.Identity">
            <summary>
            Returns the identity element in the group.
            </summary>
        </member>
        <member name="M:UProveCrypto.ecc.ECGroupDescription.#ctor">
            <summary>
            Constructs an empty ECCGroupDescription.
            </summary>
        </member>
        <member name="M:UProveCrypto.ecc.ECGroupDescription.#ctor(BouncyCastle.ECDomainParameters,System.String,System.String)">
            <summary>
            Constructs an ECCGroupDescription.
            <param name="parameters">The EC domain parameters.</param>
            <param name="groupName">The known name of the group, or null.</param>
            <param name="curveName">The known name of the curve, or null.</param>
            </summary>
        </member>
        <member name="M:UProveCrypto.ecc.ECGroupDescription.IsGroupElement(UProveCrypto.GroupElement)">
            <summary>
            Verifies if e is a group element.
            </summary>
            <param name="e">The element to test.</param>
            <exception cref="T:UProveCrypto.InvalidUProveArtifactException">Thrown if i is not in the group.</exception>
        </member>
        <member name="T:UProveCrypto.GroupElement">
            <summary>
            Represents an element of Gq. The group operation uses the multiplication notation.
            </summary>
        </member>
        <member name="M:UProveCrypto.GroupElement.Exponentiate(UProveCrypto.BigInteger)">
            <summary>
            Returns <code>this^exponent</code>.
            </summary>
            <param name="exponent">The exponent.</param>
            <returns>A group element.</returns>
        </member>
        <member name="M:UProveCrypto.GroupElement.Multiply(UProveCrypto.GroupElement)">
            <summary>
            Returns <code>this*a</code>.
            </summary>
            <param name="a">The operand.</param>
            <returns>A group element.</returns>
        </member>
        <member name="M:UProveCrypto.GroupElement.op_Multiply(UProveCrypto.GroupElement,UProveCrypto.GroupElement)">
            <summary>
            Returns <code>a*b</code>.
            </summary>
            <param name="a">First operand.</param>
            <param name="b">Second operand.</param>
            <returns>A group element.</returns>
        </member>
        <member name="M:UProveCrypto.GroupElement.op_Equality(UProveCrypto.GroupElement,UProveCrypto.GroupElement)">
            <summary>
            Returns true if <code>a == b</code>, false otherwise.
            </summary>
            <param name="a">First operand.</param>
            <param name="b">Second operand.</param>
            <returns>True if <code>a == b</code>.</returns>
        </member>
        <member name="M:UProveCrypto.GroupElement.op_Inequality(UProveCrypto.GroupElement,UProveCrypto.GroupElement)">
            <summary>
            Returns true if <code>a != b</code>, false otherwise.
            </summary>
            <param name="a">First operand.</param>
            <param name="b">Second operand.</param>
            <returns>True if <code>a != b</code>.</returns>
        </member>
        <member name="M:UProveCrypto.GroupElement.UpdateHash(UProveCrypto.HashFunction)">
            <summary>
            Updates the specified hash function with the group element.
            </summary>
            <param name="h">An instanciated hash function.</param>
        </member>
        <member name="M:UProveCrypto.GroupElement.GetEncoded">
            <summary>
            Returns an encoded group element. The element can be parsed by calling
            the corresponding group's <code>CreateGroupElement</code> method.
            </summary>
            <returns>Encoded group element.</returns>
        </member>
        <member name="T:UProveCrypto.DeviceException">
            <summary>
            Exception thrown by a device implementation
            </summary>
        </member>
        <member name="M:UProveCrypto.DeviceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UProveCrypto.DeviceException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:UProveCrypto.UProveToken">
            <summary>
            Represents a U-Prove token.
            </summary>
        </member>
        <member name="M:UProveCrypto.UProveToken.#ctor">
            <summary>
            Constructs a U-Prove token.
            </summary>
        </member>
        <member name="M:UProveCrypto.UProveToken.#ctor(System.Byte[],UProveCrypto.GroupElement,System.Byte[],System.Byte[],UProveCrypto.GroupElement,UProveCrypto.BigInteger,UProveCrypto.BigInteger,System.Boolean)">
            <summary>
            Represents a U-Prove token.
            </summary>
            <param name="uidp">The Issuer parameters UID.</param>
            <param name="h">The public key value h.</param>
            <param name="TI">The token information field value.</param>
            <param name="PI">The Prover information field value.</param>
            <param name="sigmaZPrime">The sigmaZPrime value.</param>
            <param name="sigmaCPrime">The sigmaCPrime value.</param>
            <param name="sigmaRPrime">The sigmaRPrime value.</param>
            <param name="isDeviceProtected">True if the token is Device-protected, false otherwise.</param>
        </member>
        <member name="P:UProveCrypto.UProveToken.Uidp">
            <summary>
            Gets or sets the Issuer parameters UID.
            </summary>
        </member>
        <member name="P:UProveCrypto.UProveToken.H">
            <summary>
            Gets or sets the public key value h.
            </summary>
        </member>
        <member name="P:UProveCrypto.UProveToken.TI">
            <summary>
            Gets or sets the token information field value.
            </summary>
        </member>
        <member name="P:UProveCrypto.UProveToken.PI">
            <summary>
            Gets or sets the Prover information field value.
            </summary>
        </member>
        <member name="P:UProveCrypto.UProveToken.SigmaZPrime">
            <summary>
            Gets or sets the sigmaZPrime value.
            </summary>
        </member>
        <member name="P:UProveCrypto.UProveToken.SigmaCPrime">
            <summary>
            Gets or sets the sigmaCPrime value.
            </summary>
        </member>
        <member name="P:UProveCrypto.UProveToken.SigmaRPrime">
            <summary>
            Gets or sets the sigmaRPrime value.
            </summary>
        </member>
        <member name="P:UProveCrypto.UProveToken.IsDeviceProtected">
            <summary>
            Gets or sets the boolean indicating if the token is Device-protected.
            </summary>
        </member>
        <member name="M:UProveCrypto.ParameterSet.#ctor(System.String,UProveCrypto.GroupDescription,UProveCrypto.GroupElement[],UProveCrypto.GroupElement)">
            <summary>
            Constructs a new parameter set
            </summary>
            <param name="name">The name of the parameter set</param>
            <param name="group">The group descripton of parameter set</param>
            <param name="g">The issuer generators</param>
            <param name="gd">The device generator</param>
        </member>
        <member name="T:UProveCrypto.IssuerSetupParameters">
            <summary>
            Specifies the Issuer setup parameters.
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerSetupParameters.#ctor">
            <summary>
            Constructs a new <code>IssuerSetupParameters</code> instance.
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerSetupParameters.Validate">
            <summary>
            Validates the consistency of the object. This method is called by <code>Generate</code>.
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerSetupParameters.Generate(System.Boolean)">
            <summary>
            Generates a fresh Issuer key and parameters.
            </summary>
            <param name="supportDevice">If true, the parameters will support issuing Device-protected tokens.</param>
            <returns>A Issuer key and parameters instance.</returns>
        </member>
        <member name="M:UProveCrypto.IssuerSetupParameters.GetDefaultParameterSet(UProveCrypto.GroupConstruction)">
            <summary>
            Returns the default parameter set for a specified construction.
            </summary>
            <param name="construction">Group construction to use.</param>
            <returns>The default parameter set.</returns>
        </member>
        <member name="M:UProveCrypto.IssuerSetupParameters.GetDefaultEValues(System.Int32)">
            <summary>
            Get the default <code>E</code> values for a specified number of attributes. This returns an
            array initized with <code>0x01</code>, to allow arbitrary-sized attributes.
            </summary>
            <param name="numberOfAttributes">Number of attributes to encode in U-Prove tokens.</param>
            <returns></returns>
        </member>
        <member name="P:UProveCrypto.IssuerSetupParameters.GroupConstruction">
            <summary>
            Gets or sets the group construction.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerSetupParameters.ParameterSet">
            <summary>
            Gets or sets the parameter set.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerSetupParameters.UseRecommendedParameterSet">
            <summary>
            Gets or sets is recommended parameters are used.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerSetupParameters.Gq">
            <summary>
            Gets or sets the group description.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerSetupParameters.E">
            <summary>
            Gets or sets the E array.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerSetupParameters.UidH">
            <summary>
            Gets or sets the hash algorithm unique identifier.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerSetupParameters.UidP">
            <summary>
            Gets of sets the Issuer parameters unique identifier.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerSetupParameters.S">
            <summary>
            Gets or sets the specification value.
            </summary>
        </member>
        <member name="T:UProveCrypto.InvalidUProveArtifactException">
            <summary>
            This exception is thrown when a U-Prove artifact (an IssuerParameters, a UProveToken, or a PresentationProof)
            is invalid.
            </summary>
        </member>
        <member name="M:UProveCrypto.InvalidUProveArtifactException.#ctor">
            <summary>
            Constructs a new InvalidUProveArtifactException.
            </summary>
        </member>
        <member name="M:UProveCrypto.InvalidUProveArtifactException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidUProveArtifactException.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:UProveCrypto.BigInteger">
            <summary>
            Represents a big integer. 
            </summary>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_Equality(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Equality test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a == b, false otherwise</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_Inequality(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Inequality test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a != b, false otherwise</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_GreaterThan(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Greater test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &gt; b, false otherwise</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_LessThan(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Smaller test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &lt; b, false otherwise</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_GreaterThanOrEqual(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Greater or equal test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &gt;= b, false otherwise</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_LessThanOrEqual(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Smaller or equal test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &lt;= b, false otherwise</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_UnaryNegation(UProveCrypto.BigInteger)">
            <summary>
            BigInteger inverse with respect to addition.
            </summary>
            <param name="n">The BigInteger whose opposite is to be computed</param>
            <returns>The BigInteger inverse with respect to addition</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_Addition(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Addition operation of two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the addition</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_Subtraction(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Subtraction operation of two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the subtraction</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_Multiply(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Multiplication operation of two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the multiplication</returns>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_Division(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Division operation of two BigIntegers a and b, b != 0.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the division</returns>
            <exception cref="!:BigIntegerException">Cannot divide by zero exception</exception>
        </member>
        <member name="M:UProveCrypto.BigInteger.op_Modulus(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Modulo operation of two BigIntegers a and b, b != 0.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the modulo</returns>
            <exception cref="!:BigIntegerException">Cannot divide by zero exception</exception>
        </member>
        <member name="T:UProveCrypto.ProverRandomData">
            <summary>
            Specifies the Prover random data for the issuance protocol, if provided externally.
            </summary>
        </member>
        <member name="M:UProveCrypto.ProverRandomData.#ctor">
            <summary>
            Constructs a new <code>ProverRandomData</code> instance.
            </summary>
        </member>
        <member name="M:UProveCrypto.ProverRandomData.#ctor(UProveCrypto.BigInteger[],UProveCrypto.BigInteger[],UProveCrypto.BigInteger[])">
            <summary>
            Constructs a new <code>ProverRandomData</code> instance.
            </summary>
            <param name="alpha">An array of alpha values.</param>
            <param name="beta1">An array of beta1 values.</param>
            <param name="beta2">An array of beta2 values.</param>
        </member>
        <member name="M:UProveCrypto.ProverRandomData.Validate">
            <summary>
            Validates the consistency of the object.
            </summary>
        </member>
        <member name="P:UProveCrypto.ProverRandomData.Alpha">
            <summary>
            Gets of sets the alpha array.
            </summary>
        </member>
        <member name="P:UProveCrypto.ProverRandomData.Beta1">
            <summary>
            Gets of sets the beta1 array.
            </summary>
        </member>
        <member name="P:UProveCrypto.ProverRandomData.Beta2">
            <summary>
            Gets of sets the beta2 array.
            </summary>
        </member>
        <member name="T:UProveCrypto.Prover">
            <summary>
            Implements the <code>Prover</code> side of the U-Prove issuance protocol. One instance must be created for
            each run of the issuance protocol, in which many U-Prove tokens can be obtained in parallel.
            </summary>
        </member>
        <member name="M:UProveCrypto.Prover.#ctor(UProveCrypto.IssuerParameters,System.Int32,System.Byte[][],System.Byte[],System.Byte[],UProveCrypto.IDevice)">
            <summary>
            Constructs a new <code>Prover</code> instance.
            </summary>
            <param name="ip">The Issuer parameters.</param>
            <param name="numberOfTokens">Number of tokens to issue.</param>
            <param name="A">The token attribute values.</param>
            <param name="TI">The token information field value.</param>
            <param name="PI">The Prover information field value.</param>
            <param name="d">The Device. If this parameter is non-null, then the issued tokens will be Device-protected.</param>
        </member>
        <member name="M:UProveCrypto.Prover.#ctor(UProveCrypto.IssuerParameters,System.Int32,System.Byte[][],System.Byte[],System.Byte[],UProveCrypto.IDevice,UProveCrypto.ProverRandomData)">
            <summary>
            Constructs a new <code>Prover</code> instance.
            </summary>
            <param name="ip">The Issuer parameters.</param>
            <param name="numberOfTokens">Number of tokens to issue.</param>
            <param name="A">The token attribute values.</param>
            <param name="TI">The token information field value.</param>
            <param name="PI">The Prover information field value.</param>
            <param name="d">The Device. If this parameter is non-null, then the issued tokens will be Device-protected.</param>
            <param name="preGeneratedRandomData">Optional pregenerated <code>numberOfTokens</code> ProverRandomData instances.</param>
        </member>
        <member name="M:UProveCrypto.Prover.GenerateSecondMessage(UProveCrypto.FirstIssuanceMessage)">
            <summary>
            Generates the second issuance message.
            </summary>
            <param name="message">The first issuance message.</param>
            <returns>The second issuance message.</returns>
        </member>
        <member name="M:UProveCrypto.Prover.GenerateTokens(UProveCrypto.ThirdIssuanceMessage,System.Boolean)">
            <summary>
            Generates the U-Prove key and tokens.
            </summary>
            <param name="message">The third issuance message.</param>
            <param name="skipTokenValidation">Set to <code>true</code> to skip token validation;
            <code>false</code> otherwise. Token validation SHOULD be performed before use, either
            by setting <code>skipTokenValidation</code> to <code>false</code>, or by later using the 
            <code>ProtocolHelper.VerifyTokenSignature</code> method.
            </param>
            <exception cref="T:UProveCrypto.InvalidUProveArtifactException">If the token signature is invalid.</exception>
            <returns>An array of U-Prove keys and tokens</returns>
        </member>
        <member name="T:UProveCrypto.Issuer">
            <summary>
            Implements the <code>Issuer</code> side of the U-Prove issuance protocol. One instance must be created for
            each run of the issuance protocol, in which many U-Prove tokens can be obtained in parallel.
            </summary>
        </member>
        <member name="M:UProveCrypto.Issuer.#ctor(UProveCrypto.IssuerKeyAndParameters,System.Int32,System.Byte[][],System.Byte[],UProveCrypto.GroupElement)">
            <summary>
            Constructs a new <code>Issuer</code> instance.
            </summary>
            <param name="ikap">The Issuer key and parameters.</param>
            <param name="numberOfTokens">Number of tokens to issue.</param>
            <param name="A">The token attribute values.</param>
            <param name="TI">The token information field value.</param>
            <param name="hd">The Device public key. If this parameter is non-null, then the issued tokens will be Device-protected.</param>
        </member>
        <member name="M:UProveCrypto.Issuer.#ctor(UProveCrypto.IssuerKeyAndParameters,System.Int32,System.Byte[][],System.Byte[],UProveCrypto.GroupElement,UProveCrypto.BigInteger[])">
            <summary>
            Constructs a new <code>Issuer</code> instance.
            </summary>
            <param name="ikap">The Issuer key and parameters.</param>
            <param name="numberOfTokens">Number of tokens to issue.</param>
            <param name="A">The token attribute values.</param>
            <param name="TI">The token information field value.</param>
            <param name="hd">The Device public key. If this parameter is non-null, then the issued tokens will be Device-protected.</param>
            <param name="preGeneratedW">Optional pregenerated <code>numberOfTokens</code> random Zq elements.</param>
        </member>
        <member name="M:UProveCrypto.Issuer.GenerateFirstMessage">
            <summary>
            Generates the first issuance message.
            </summary>
            <returns>The first issuance message.</returns>
        </member>
        <member name="M:UProveCrypto.Issuer.GenerateThirdMessage(UProveCrypto.SecondIssuanceMessage)">
            <summary>
            Generates the third issuance message.
            </summary>
            <param name="message">The second issuance message.</param>
            <returnn>The third issuance message.</returnn>
        </member>
        <member name="T:UProveCrypto.SubgroupGroupDescription">
            <summary>
            Describes a group Gq using the subgroup construction.
            </summary>
        </member>
        <member name="M:UProveCrypto.SubgroupGroupDescription.#ctor">
            <summary>
            Constructs a SubgroupGroupDescription.
            </summary>
        </member>
        <member name="M:UProveCrypto.SubgroupGroupDescription.#ctor(UProveCrypto.BigInteger,UProveCrypto.BigInteger,UProveCrypto.GroupElement,System.String,System.Byte[])">
            <summary>
            Constructs a SubgroupGroupDescription.
            </summary>
            <param name="p">The value p.</param>
            <param name="q">The value q.</param>
            <param name="g">The value g.</param>
            <param name="groupName">The known name of the group, or null.</param>
            <param name="domainParameterSeed">The domain parameter seed if the NIST generation is used, or null.</param>
        </member>
        <member name="M:UProveCrypto.SubgroupGroupDescription.CheckRange(UProveCrypto.BigInteger)">
            <summary>
            Checks that 0 &lt;= <code>i</code> &lt; p.
            </summary>
            <param name="i">The value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <code>i</code> is not in range.</exception>
        </member>
        <member name="M:UProveCrypto.SubgroupGroupDescription.IsGroupElement(UProveCrypto.GroupElement)">
            <summary>
            Verifies if i is a group element.
            </summary>
            <param name="e">The element to test.</param>
            <exception cref="T:UProveCrypto.InvalidUProveArtifactException">Thrown if i is not in the group.</exception>
        </member>
        <member name="M:UProveCrypto.SubgroupGroupDescription.DeriveElement(System.Byte[],System.Byte,System.Int32@)">
            <summary>
            This method implements the method defined in recommended parameters spec
            </summary>
        </member>
        <member name="P:UProveCrypto.SubgroupGroupDescription.P">
            <summary>
            Gets or sets the value p.
            </summary>
        </member>
        <member name="T:UProveCrypto.RandomNumberGenerator">
            <summary>
            Cryptographically strong Zq element generator.
            </summary>
        </member>
        <member name="M:UProveCrypto.RandomNumberGenerator.GetRandomValue(UProveCrypto.BigInteger)">
            <summary>
            Returns a random BigInteger x such that 0 &lt;= x &lt; max. 
            </summary>
            <param name="max">Maximal value (exclusive).</param>
            <returns>A random BigInteger.</returns>
        </member>
        <member name="M:UProveCrypto.RandomNumberGenerator.GetRandomValue(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Returns a random BigInteger x such that min &lt;= x &lt; max. 
            </summary>
            <param name="min">Minimal range (inclusive).</param>
            <param name="max">Maximal range (exclusive).</param>
            <returns>a random value.</returns>
        </member>
        <member name="T:UProveCrypto.GroupDescriptionSerializable">
            <summary>
            This class is a serializable version of GroupDescription used only during serialization.
            Serializing GroupDescription will result in the creation and serialization of this class instead.
            This class is also created upon deserialization. The ToGroupDescription() method will be called
            by the surrogate class to create a new GroupDescription from this class.
            </summary>
        </member>
        <member name="T:UProveCrypto.SubgroupGroupDescriptionSerializable">
            <summary>
            This class is a serializable version of SubgroupGroupDescription used only during serialization.
            Serializing SubgroupGroupDescription will result in the creation and serialization of this class instead.
            This class is also created upon deserialization. The ToSubgroupGroupDescription() method will be called
            by the surrogate class to create a new SubgroupGroupDescription from this class.
            </summary>
        </member>
        <member name="T:UProveCrypto.UProveKeyAndToken">
            <summary>
            Represents a U-Prove key and token.
            </summary>
        </member>
        <member name="M:UProveCrypto.UProveKeyAndToken.#ctor">
            <summary>
            Constructs a new <code>UProveKeyAndToken</code> instance.
            </summary>
        </member>
        <member name="P:UProveCrypto.UProveKeyAndToken.Token">
            <summary>
            Gets or sets the U-Prove token.
            </summary>
        </member>
        <member name="P:UProveCrypto.UProveKeyAndToken.PrivateKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="T:UProveCrypto.ProtocolHelper">
            <summary>
            Provides some helper functions for the U-Prove protocols.
            </summary>
        </member>
        <member name="M:UProveCrypto.ProtocolHelper.ToByteArray(UProveCrypto.BigInteger)">
            <summary>
            Converts a BigInteger into a big-endian byte representaion.
            </summary>
            <param name="value">A non-negative BigInteger to convert.</param>
            <returns>A byte array encoding the BigInteger value.</returns>
        </member>
        <member name="M:UProveCrypto.ProtocolHelper.ToBigInteger(System.Byte[])">
            <summary>
            Returns the BigInteger value encoded in byte array.
            </summary>
            <param name="value">A byte array encoding a positive integer in big-endian.</param>
            <returns>A BigInteger.</returns>
        </member>
        <member name="M:UProveCrypto.ProtocolHelper.GenerateIssuerParametersCryptoData(UProveCrypto.IssuerParameters,UProveCrypto.GroupElement[],System.Boolean)">
            <summary>
            Generates the Issuer parameters cryptographic data, <code>ip</code> will be updated with the cryptographic data.
            </summary>
            <param name="ip">An instanciated Issuer parameters; the Gq and E properties must be set.</param>
            <param name="gValues">The issuer generators to use, or null.</param>
            <param name="supportDevice">Indicates if the device generator must be generated.</param>
            <returns>The Issuer parameters private key.</returns>
        </member>
        <member name="M:UProveCrypto.ProtocolHelper.VerifyIssuerParameters(UProveCrypto.IssuerParameters,System.Boolean)">
            <summary>
            Verifies the Issuer parameters.
            </summary>
            <param name="ip">The Issuer parameters to verify.</param>
        </member>
        <member name="M:UProveCrypto.ProtocolHelper.VerifyTokenSignature(UProveCrypto.IssuerParameters,UProveCrypto.UProveToken)">
            <summary>
            Verifies a U-Prove token signature.
            </summary>
            <param name="ip">The Issuer parameters corresponding to the U-Prove token.</param>
            <param name="upt">The U-Prove token to verify.</param>
            <exception cref="T:UProveCrypto.InvalidUProveArtifactException">If the U-Prove token is invalid.</exception>
        </member>
        <member name="M:UProveCrypto.ProtocolHelper.ComputeTokenID(UProveCrypto.IssuerParameters,UProveCrypto.UProveToken)">
            <summary>
            Computes the U-Prove token identifier.
            </summary>
            <param name="ip">The issuer parameters associated with <code>upt</code>.</param>
            <param name="upt">The U-Prove token from which to compute the identifier.</param>
            <returns></returns>
        </member>
        <member name="T:UProveCrypto.HashFunction">
            <summary>
            A hash function for the U-Prove protocols.
            </summary>
        </member>
        <member name="M:UProveCrypto.HashFunction.#ctor(System.String)">
            <summary>
            Constructs a HashFunction.
            </summary>
            <param name="hashAlgorithm">The name of the hash algorithm. Must be one of the value listed in http://msdn.microsoft.com/en-us/library/wet69s13.aspx</param>
        </member>
        <member name="P:UProveCrypto.HashFunction.Digest">
            <summary>
            Finalizes the hash function and returns the digest.
            </summary>
        </member>
        <member name="T:UProveCrypto.SubgroupGroupElement">
            <summary>
            An element of a group using the subgroup constructions.
            </summary>
        </member>
        <member name="M:UProveCrypto.SubgroupGroupElement.#ctor(UProveCrypto.BigInteger,UProveCrypto.BigInteger)">
            <summary>
            Constructs a new SubgroupGroupElement.
            </summary>
            <param name="i">The element value.</param>
            <param name="p">The group modulo.</param>
        </member>
        <member name="P:UProveCrypto.SubgroupGroupElement.I">
            <summary>
            Gets the the group element value.
            </summary>
        </member>
        <member name="P:UProveCrypto.SubgroupGroupElement.P">
            <summary>
            Gets the the group value p.
            </summary>
        </member>
        <member name="T:UProveCrypto.IssuerKeyAndParameters">
            <summary>
            Contains an Issuer parameters and the associated private key.
            </summary>
        </member>
        <member name="M:UProveCrypto.IssuerKeyAndParameters.#ctor(UProveCrypto.BigInteger,UProveCrypto.IssuerParameters)">
            <summary>
            Constructs an IssuerKeyAndParameters instance.
            </summary>
            <param name="privateKey">The private key.</param>
            <param name="issuerParameters">The Issuer parameters.</param>
        </member>
        <member name="P:UProveCrypto.IssuerKeyAndParameters.PrivateKey">
            <summary>
            The private key.
            </summary>
        </member>
        <member name="P:UProveCrypto.IssuerKeyAndParameters.IssuerParameters">
            <summary>
            The Issuer parameters.
            </summary>
        </member>
        <member name="T:UProveCrypto.ProofGenerationRandomData">
            <summary>
            Specifies the random data for the presentation proof generation, if provided externally.
            </summary>
        </member>
        <member name="M:UProveCrypto.ProofGenerationRandomData.#ctor(UProveCrypto.BigInteger,UProveCrypto.BigInteger[],UProveCrypto.BigInteger,UProveCrypto.BigInteger[],UProveCrypto.BigInteger[])">
            <summary>
            Constructs a new <code>ProofGenerationRandomData</code> instance.
            </summary>
            <param name="w0">The <code>w0</code> value.</param>
            <param name="w">The <code>w</code> values.</param>
            <param name="wd">The <code>wd</code> value if the token is Device-protected; null otherwise.</param>
            <param name="tildeO">The <code>tildeO</code> values (if attribute commitments are generated).</param>
            <param name="tildeW">The <code>tildeW</code> values (if attribute commitments are generated).</param>
        </member>
        <member name="M:UProveCrypto.ProofGenerationRandomData.Clear">
            <summary>
            Clears the object.
            </summary>
        </member>
        <member name="M:UProveCrypto.ProofGenerationRandomData.Generate(System.Int32,System.Int32,UProveCrypto.FieldZq,System.Boolean)">
            <summary>
            Generates a <code>ProofGenerationRandomData</code> instance using the internal RNG.
            </summary>
            <param name="numUndisclosed">Number of undisclosed attributes.</param>
            <param name="numCommitted">Number of committed attributes.</param>
            <param name="Zq">Field Zq</param>
            <param name="isDeviceProtected">True if a toke is device-protected.</param>
            <returns>A pregenerated set of random values.</returns>
        </member>
        <member name="P:UProveCrypto.ProofGenerationRandomData.W0">
            <summary>
            Gets the <code>w0</code> value.
            </summary>
        </member>
        <member name="P:UProveCrypto.ProofGenerationRandomData.W">
            <summary>
            Gets the <code>w</code> values.
            </summary>
        </member>
        <member name="P:UProveCrypto.ProofGenerationRandomData.Wd">
            <summary>
            Gets the <code>wd</code> value.
            </summary>
        </member>
        <member name="P:UProveCrypto.ProofGenerationRandomData.TildeO">
            <summary>
            Gets the <code>tildeO</code> values.
            </summary>
        </member>
        <member name="P:UProveCrypto.ProofGenerationRandomData.TildeW">
            <summary>
            Gets the <code>tildeW</code> values.
            </summary>
        </member>
        <member name="T:UProveCrypto.CommitmentValues">
            <summary>
            Contains the commitment values.
            </summary>
        </member>
        <member name="M:UProveCrypto.CommitmentValues.#ctor(UProveCrypto.GroupElement,System.Byte[],UProveCrypto.BigInteger)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="tildeC">The <code>tildeC</code> value.</param>
            <param name="tildeA">The <code>tildeA</code> value.</param>
            <param name="tildeR">The <code>tildeR</code> value.</param>
        </member>
        <member name="P:UProveCrypto.CommitmentValues.TildeC">
            <summary>
            Gets or sets the <code>tildeC</code> value.
            </summary>
        </member>
        <member name="P:UProveCrypto.CommitmentValues.TildeA">
            <summary>
            Gets or sets the <code>tildeA</code> value.
            </summary>
        </member>
        <member name="P:UProveCrypto.CommitmentValues.TildeR">
            <summary>
            Gets or sets the <code>tildeR</code> value.
            </summary>
        </member>
        <member name="T:UProveCrypto.PresentationProof">
            <summary>
            Represents a presentation proof.
            </summary>
        </member>
        <member name="M:UProveCrypto.PresentationProof.#ctor">
            <summary>
            Constructs a new <code>PresentationProof</code> instance.
            </summary>
        </member>
        <member name="M:UProveCrypto.PresentationProof.#ctor(System.Byte[][],System.Byte[],System.Byte[],UProveCrypto.GroupElement,UProveCrypto.BigInteger[],UProveCrypto.CommitmentValues[])">
            <summary>
            Constructs a new <code>PresentationProof</code> instance.
            </summary>
            <param name="disclosedAttributes">The disclosed attributes.</param>
            <param name="a">The <code>a</code> value.</param>
            <param name="ap">The <code>ap</code> value.</param>
            <param name="ps">The <code>Ps</code> value.</param>
            <param name="r">The <code>r</code> values.</param>
            <param name="commitments">The commitments values.</param>
        </member>
        <member name="M:UProveCrypto.PresentationProof.Generate(UProveCrypto.IssuerParameters,System.Int32[],System.Int32[],System.Int32,System.Byte[],System.Byte[],System.Byte[],UProveCrypto.IDevicePresentationContext,UProveCrypto.UProveKeyAndToken,System.Byte[][],UProveCrypto.ProofGenerationRandomData,UProveCrypto.BigInteger[]@)">
            <summary>
            Generates a presentation proof including optionally presenting a pseudonym, creating attribute commitments, and passing pre-generated random values.
            </summary>
            <param name="ip">The issuer parameters corresponding to <code>upkt</code>.</param>
            <param name="disclosed">An ordered array of disclosed attribute indices.</param>
            <param name="committed">An ordered array of committed attribute indices.</param>
            <param name="pseudonymAttribIndex">Index of the attribute used to create a scope-exclusive pseudonym, or 0 if no pseudonym is to be presented. The index must not be part of the disclosed attributes.</param>
            <param name="pseudonymScope">The pseudonym scope, or null if no pseudonym is to be presented.</param>
            <param name="message">The presentation message.</param>
            <param name="messageD">The message for the Device, or null.</param>
            <param name="deviceContext">The active device context, if token is device-protected, or null.</param>
            <param name="upkt">The U-Proke key and token.</param>
            <param name="attributes">The token attributes.</param>
            <param name="preGenW">Optional pregenerated random data for the proof generation.</param>
            <param name="tildeO">Returned tildeO values if commitments are computed.</param>
            <returns>A presentation proof.</returns>
        </member>
        <member name="M:UProveCrypto.PresentationProof.Generate(UProveCrypto.IssuerParameters,System.Int32[],System.Int32[],System.Int32,System.Byte[],System.Byte[],System.Byte[],UProveCrypto.IDevicePresentationContext,UProveCrypto.UProveKeyAndToken,System.Byte[][],UProveCrypto.BigInteger[]@)">
            <summary>
            Generates a presentation proof including optionally presenting a pseudonym, and creating attribute commitments.
            </summary>
            <param name="ip">The issuer parameters corresponding to <code>upkt</code>.</param>
            <param name="disclosed">An ordered array of disclosed attribute indices.</param>
            <param name="committed">An ordered array of committed attribute indices.</param>
            <param name="pseudonymAttribIndex">Index of the attribute used to create a scope-exclusive pseudonym, or 0 if no pseudonym is to be presented. The index must not be part of the disclosed attributes.</param>
            <param name="pseudonymScope">The pseudonym scope, or null if no pseudonym is to be presented.</param>
            <param name="message">The presentation message.</param>
            <param name="messageD">The message for the Device, or null.</param>
            <param name="deviceContext">The active device context, if token is device-protected, or null.</param>
            <param name="upkt">The U-Proke key and token.</param>
            <param name="attributes">The token attributes.</param>
            <param name="tildeO">Returned tildeO values if commitments are computed.</param>
            <returns>A presentation proof.</returns>
        </member>
        <member name="M:UProveCrypto.PresentationProof.Generate(UProveCrypto.IssuerParameters,System.Int32[],System.Byte[],System.Byte[],UProveCrypto.IDevicePresentationContext,UProveCrypto.UProveKeyAndToken,System.Byte[][])">
            <summary>
            Generates a presentation proof.
            </summary>
            <param name="ip">The issuer parameters corresponding to <code>upkt</code>.</param>
            <param name="disclosed">An ordered array of disclosed attribute indices.</param>
            <param name="message">The presentation message.</param>
            <param name="messageD">The message for the Device, or null.</param>
            <param name="deviceContext">The active device context, if token is device-protected, or null.</param>
            <param name="upkt">The U-Proke key and token.</param>
            <param name="attributes">The token attributes.</param>
            <returns>A presentation proof.</returns>
        </member>
        <member name="M:UProveCrypto.PresentationProof.Verify(UProveCrypto.IssuerParameters,System.Int32[],System.Byte[],System.Byte[],UProveCrypto.UProveToken)">
            <summary>
            Verifies a presentation proof.
            </summary>
            <param name="ip">The issuer parameters associated with <code>upt</code>.</param>
            <param name="disclosed">An ordered array of disclosed attribute indices.</param>
            <param name="message">The presentation message.</param>
            <param name="messageD">The message for the Device, or null.</param>
            <param name="upt">The U-Prove token.</param>
            <exception cref="T:UProveCrypto.InvalidUProveArtifactException">Thrown if the proof is invalid.</exception>
        </member>
        <member name="M:UProveCrypto.PresentationProof.Verify(UProveCrypto.IssuerParameters,System.Int32[],System.Int32[],System.Int32,System.Byte[],System.Byte[],System.Byte[],UProveCrypto.UProveToken)">
            <summary>
            Verifies a presentation proof with a presented pseudonym and committed values.
            </summary>
            <param name="ip">The issuer parameters associated with <code>upt</code>.</param>
            <param name="disclosed">An ordered array of disclosed attribute indices.</param>
            <param name="committed">An ordered array of committed attribute indices.</param>
            <param name="pseudonymAttribIndex">Index of the attribute used to create a scope-exclusive pseudonym, or 0 if no pseudonym is to be presented. The index must not be part of the disclosed attributes.</param>
            <param name="pseudonymScope">The pseudonym scope, or null if no pseudonym is to be presented.</param>
            <param name="message">The presentation message.</param>
            <param name="messageD">The message for the Device, or null.</param>
            <param name="upt">The U-Prove token.</param>
            <exception cref="T:UProveCrypto.InvalidUProveArtifactException">Thrown if the proof is invalid.</exception>
        </member>
        <member name="P:UProveCrypto.PresentationProof.DisclosedAttributes">
            <summary>
            Gets or sets the disclosed attributes.
            </summary>
        </member>
        <member name="P:UProveCrypto.PresentationProof.A">
            <summary>
            Gets or sets the <code>a</code> value.
            </summary>
        </member>
        <member name="P:UProveCrypto.PresentationProof.Ap">
            <summary>
            Gets or sets the <code>ap</code> value.
            </summary>
        </member>
        <member name="P:UProveCrypto.PresentationProof.Ps">
            <summary>
            Gets or sets the <code>Ps</code> value.
            </summary>
        </member>
        <member name="P:UProveCrypto.PresentationProof.R">
            <summary>
            Gets or sets the <code>r</code> values.
            </summary>
        </member>
        <member name="P:UProveCrypto.PresentationProof.Commitments">
            <summary>
            Gets or sets the commitment values.
            </summary>
        </member>
        <member name="T:UProveCrypto.GroupConstruction">
            <summary>
            Defines the supported group constructions: Subgroup and ECC.
            </summary>
        </member>
    </members>
</doc>
