//* Licensed Materials - Property of                                  *
//* IBM                                                               *
//* Miracle A/S                                                       *
//* Alexandra Instituttet A/S                                         *
//*                                                                   *
//* eu.abc4trust.pabce.1.34                                           *
//*                                                                   *
//* (C) Copyright IBM Corp. 2014. All Rights Reserved.                *
//* (C) Copyright Miracle A/S, Denmark. 2014. All Rights Reserved.    *
//* (C) Copyright Alexandra Instituttet A/S, Denmark. 2014. All       *
//* Rights Reserved.                                                  *
//* US Government Users Restricted Rights - Use, duplication or       *
//* disclosure restricted by GSA ADP Schedule Contract with IBM Corp. *
//*                                                                   *
//* This file is licensed under the Apache License, Version 2.0 (the  *
//* "License"); you may not use this file except in compliance with   *
//* the License. You may obtain a copy of the License at:             *
//*   http://www.apache.org/licenses/LICENSE-2.0                      *
//* Unless required by applicable law or agreed to in writing,        *
//* software distributed under the License is distributed on an       *
//* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY            *
//* KIND, either express or implied.  See the License for the         *
//* specific language governing permissions and limitations           *
//* under the License.                                                *
//*/**/****************************************************************

package eu.abc4trust.abce.external.issuer;

import java.net.URI;
import java.util.List;

import eu.abc4trust.cryptoEngine.CryptoEngineException;
import eu.abc4trust.keyManager.KeyManagerException;
import eu.abc4trust.xml.Attribute;
import eu.abc4trust.xml.CredentialSpecification;
import eu.abc4trust.xml.FriendlyDescription;
import eu.abc4trust.xml.IssuanceLogEntry;
import eu.abc4trust.xml.IssuanceMessage;
import eu.abc4trust.xml.IssuanceMessageAndBoolean;
import eu.abc4trust.xml.IssuancePolicy;
import eu.abc4trust.xml.IssuanceTokenDescription;
import eu.abc4trust.xml.IssuerParameters;
import eu.abc4trust.xml.SystemParameters;

public interface IssuerAbcEngine {

    /**
     * This method generates a fresh set of system parameters for the given key length and
     * cryptographic mechanism. Issuers can generate their own system parameters, but can also reuse
     * system parameters generated by a different entity. More typically, a central party (e.g., a
     * standardization body) will generate and publish system parameters for a number of different key
     * lengths that will be used by many Issuers.
     * 
     * @param keyLength
     * @param cryptographicMechanism
     * @return
     * @throws CryptoEngineException 
     * @throws KeyManagerException 
     */
    public SystemParameters setupSystemParameters(int keyLength) throws CryptoEngineException, KeyManagerException;

    /**
     * This method generates a fresh issuance key and the corresponding Issuer parameters. The
     * issuance key is stored in the Issuer’s key store, the Issuer parameters are returned as output
     * of the method. The input to this method specify the credential specification credspec of the
     * credentials that will be issued with these parameters, the system parameters syspars, the
     * unique identifier uid of the generated parameters, the hash algorithm identifier hash,
     * the credential algorithm id (idemix or uprove) and,
     * optionally, the parameters identifier for any Issuer-driven Revocation Authority.
     * 
     * @param credspec
     * @param syspars
     * @param uid
     * @param hash
     * @param algorithmId
     * @param revParsUid
     * @return
     * @throws CryptoEngineException 
     */
    @Deprecated
    public IssuerParameters setupIssuerParameters(CredentialSpecification credspec,
            SystemParameters syspars, URI uid, URI hash, URI algorithmId, URI revParsUid, List<FriendlyDescription> friendlyDescriptions) throws CryptoEngineException;

    /**
     * This method generates a fresh issuance key and the corresponding Issuer parameters. The
     * issuance key is stored in the Issuer’s key store, the Issuer parameters are returned as output
     * of the method. The input to this method specify the maximal number of attributes of the
     * credentials that will be issued with these parameters, the system parameters syspars, the
     * unique identifier uid of the generated parameters,
     * the credential algorithm id (idemix or uprove) and,
     * optionally, the parameters identifier for any Issuer-driven Revocation Authority.
     * 
     * @param credspec
     * @param syspars
     * @param uid
     * @param hash
     * @param algorithmId
     * @param revParsUid
     * @return
     * @throws CryptoEngineException 
     */
    public IssuerParameters setupIssuerParameters(SystemParameters syspars,
        int maximalNumberOfAttributes, URI technology, URI uid, URI revocationAuthority,
        List<FriendlyDescription> friendlyIssuerDescription) throws CryptoEngineException;
    
    /**
     * 
     * This method is invoked by the Issuer to initiate an issuance protocol
     * based on the given issuance policy ip and the list of attribute
     * type-value pairs atts to be embedded in the new credential. It returns an
     * IssuanceMessage that is to be sent to the User and fed to the Issuance
     * Manager.issuanceProtocolStep method on the User’s side. The
     * IssuanceMessage contains a Context attribute that will be the same for
     * all message exchanges in this issuance protocol, to facilitate linking
     * the different flows of the protocol. In case of an issuance “from
     * scratch”, i.e., for which the User does not have to prove ownership of
     * existing credentials or established pseudonyms, the given issuance policy
     * ip merely specifies the credential specification and the issuer
     * parameters for the credential to be issued. In this case, the returned
     * issuance message is the first message in the actual cryptographic
     * issuance protocol.
     * 
     * In case of an “advanced” issuance, i.e., where the User has to prove
     * ownership of existing credentials or pseudonyms to carry over attributes,
     * a user secret, or a device secret, the returned IssuanceMessage is simply
     * a wrapper around the issuance policy ip with a fresh Context attribute.
     * The returned boolean indicates whether this is the last flow of the
     * issuance protocol. If the IssuanceMessage is not the final one, the
     * Issuer will subsequently invoke its issuanceProtocolStep method on the
     * next incoming IssuanceMessage from the User.
     * 
     * @param ip
     * @param attributes
     * @return
     * @throws CryptoEngineException
     */
    public IssuanceMessageAndBoolean initIssuanceProtocol(IssuancePolicy ip,
            List<Attribute> attributes) throws CryptoEngineException;

    /**
     * This method performs one step in an interactive issuance protocol. On
     * input an incoming issuance message m received from the User, it returns
     * the outgoing issuance message that is to be sent back to the User, plus a
     * boolean indicating whether this is the last message in the protocol. The
     * Context attribute of the outgoing message has the same value as that of
     * the incoming message, allowing the Issuer to link the different messages
     * of this issuance protocol.
     * 
     * @param m
     * @return
     * @throws CryptoEngineException
     */
    public IssuanceMessageAndBoolean issuanceProtocolStep(IssuanceMessage m)
            throws CryptoEngineException;

    /**
     * This method is invoked by the Issuer to initialize the re-issuance of
     * U-Prove tokens. It uses only the issuance policy since this policy is
     * supposed to reveal all attributes of the user. Then the reIssuer will
     * extract the attributes from the presentation token and run issuance as
     * normal.
     * @param clonedIssuancePolicy
     * @throws CryptoEngineException
     */
    public IssuanceMessageAndBoolean initReIssuanceProtocol(IssuancePolicy clonedIssuancePolicy)
            throws CryptoEngineException;

    public IssuanceMessageAndBoolean reIssuanceProtocolStep(IssuanceMessage m)
            throws CryptoEngineException;

    /**
     * This method looks up an issuance log entry of previously issued
     * credentials that contains a verified issuance token together with the
     * attribute values provided by the issuer. The issuance log entry
     * identifier issuanceEntryUid is the identifier that was included in the
     * issuance token description that was returned when the token was verified.
     * 
     * @throws Exception
     */
    public IssuanceLogEntry getIssuanceLogEntry(URI issuanceEntryUid)
            throws Exception;

    /**
     * This method looks for an IssuanceTokenDescription inside the issuance message. This method
     * returns the issuance token, or NULL if none could be found. It is guaranteed that this method
     * returns a non-null value before a new credential is actually issued, so that the upper layers
     * may abort the issuance protocol if a certain condition is not satisfied (such as the absence of
     * a registered pseudonym).
     */
    public IssuanceTokenDescription extractIssuanceTokenDescription(IssuanceMessage issuanceMessage);
}
